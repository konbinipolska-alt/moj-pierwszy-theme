{% comment %}
  Professional Image Slider with Infinite Scroll
  Features: Dynamic slides, image/color options, infinite scroll, arrow navigation
{% endcomment %}

<div class="image-slider full-width" data-slider-id="{{ section.id }}">
  <div class="slider-container">
    <div class="slider-wrapper">
      {% for block in section.blocks %}
        <div class="slide" data-slide="{{ forloop.index0 }}">
          {% if block.settings.image %}
            <div class="slide-image">
              {{ block.settings.image | image_url: width: 400 | image_tag: 
                loading: 'lazy',
                alt: block.settings.image.alt | default: 'Slider image',
                class: 'slide-img'
              }}
            </div>
          {% else %}
            <div class="slide-color" style="background-color: {{ block.settings.background_color | default: '#f0f0f0' }};">
              <div class="slide-content">
                {% if block.settings.caption != blank %}
                  <div class="slide-caption">{{ block.settings.caption }}</div>
                {% endif %}
              </div>
            </div>
          {% endif %}
        </div>
      {% endfor %}
      
      {% comment %} Show placeholder if no blocks exist {% endcomment %}
      {% if section.blocks.size == 0 %}
        <div class="slide slide-placeholder">
          <div class="placeholder-content">
            <svg width="48" height="48" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1">
              <rect x="3" y="3" width="18" height="18" rx="2" ry="2"/>
              <circle cx="8.5" cy="8.5" r="1.5"/>
              <polyline points="21,15 16,10 5,21"/>
            </svg>
            <p>Add slides in Theme Editor</p>
          </div>
        </div>
      {% endif %}
    </div>

    {% if section.settings.show_arrows and section.blocks.size > 1 %}
      <button class="slider-arrow slider-arrow--prev" aria-label="Previous slide">
        <svg width="24" height="24" viewBox="0 0 24 24" fill="none">
          <path d="M15 18L9 12L15 6" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
        </svg>
      </button>
      <button class="slider-arrow slider-arrow--next" aria-label="Next slide">
        <svg width="24" height="24" viewBox="0 0 24 24" fill="none">
          <path d="M9 18L15 12L9 6" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
        </svg>
      </button>
    {% endif %}
  </div>
</div>

{% stylesheet %}
  .image-slider {
    height: 600px;
    overflow: visible;
    position: relative;
    padding: 0 0 0 48px;
    margin-top: 24px;
    margin-bottom: 0;
  }

  .slider-container {
    position: relative;
    width: 100%;
    height: 600px;
    overflow: hidden;
  }

  .slider-wrapper {
    display: flex;
    height: 100%;
    gap: 16px;
    align-items: center;
    width: max-content;
    transition: transform 0.4s cubic-bezier(0.25, 0.46, 0.45, 0.94);
  }

  .slide {
    width: 338px;
    height: 600px;
    position: relative;
    display: flex;
    flex-direction: column;
    flex-shrink: 0;
    border-radius: 4px;
    overflow: hidden;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
  }

  .slide-image {
    width: 100%;
    height: 100%;
    position: relative;
    overflow: hidden;
  }

  .slide-img {
    width: 100%;
    height: 100%;
    object-fit: cover;
    object-position: center;
  }

  .slide-color {
    width: 100%;
    height: 100%;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .slide-content {
    display: flex;
    align-items: center;
    justify-content: center;
    width: 100%;
    height: 100%;
  }

  .slide-caption {
    position: absolute;
    bottom: 0;
    left: 0;
    right: 0;
    background: linear-gradient(transparent, rgba(0, 0, 0, 0.7));
    color: white;
    padding: 20px;
    font-size: 14px;
    line-height: 1.4;
  }

  .slide-color .slide-caption {
    position: relative;
    background: rgba(0, 0, 0, 0.3);
    color: white;
    padding: 20px;
    font-size: 24px;
    font-weight: bold;
    text-align: center;
    border-radius: 4px;
  }

  .slide-placeholder {
    background: #f6f6f7;
    border: 2px dashed #d1d5db;
  }

  .placeholder-content {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    height: 100%;
    color: #6b7280;
    text-align: center;
    padding: 20px;
  }

  .placeholder-content svg {
    margin-bottom: 16px;
    opacity: 0.6;
  }

  .placeholder-content p {
    font-size: 14px;
    margin: 0;
    font-weight: 500;
  }

  .slider-arrow {
    position: absolute;
    top: 50%;
    transform: translateY(-50%);
    background-color: rgba(0, 0, 0, 0.6);
    color: white;
    border: none;
    padding: 12px;
    cursor: pointer;
    z-index: 10;
    border-radius: 50%;
    width: 48px;
    height: 48px;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: all 0.3s ease;
    opacity: 0.8;
  }

  .slider-arrow:hover {
    background-color: rgba(0, 0, 0, 0.8);
    opacity: 1;
    transform: translateY(-50%) scale(1.1);
  }

  .slider-arrow--prev {
    left: 16px;
  }

  .slider-arrow--next {
    right: 16px;
  }

  /* Mobile optimizations */
  @media (max-width: 768px) {
    .image-slider {
      height: 450px;
      padding: 24px 0 0 24px;
      padding-top: 104px; /* 80px navigation + 24px spacing */
    }

    .slider-container {
      height: 450px;
    }

    .slide {
      width: 253px;
      height: 450px;
    }

    .slider-wrapper {
      gap: 12px;
    }

    .slider-arrow {
      width: 40px;
      height: 40px;
    }

    .slider-arrow--prev {
      left: 12px;
    }

    .slider-arrow--next {
      right: 12px;
    }
  }

  @media (max-width: 480px) {
    .image-slider {
      height: 375px;
      padding: 24px 0 0 16px;
      padding-top: 104px; /* 80px navigation + 24px spacing */
    }

    .slider-container {
      height: 375px;
    }

    .slide {
      width: 211px;
      height: 375px;
    }

    .slider-wrapper {
      gap: 10px;
    }

    .slider-arrow {
      width: 36px;
      height: 36px;
    }

    .slider-arrow--prev {
      left: 8px;
    }

    .slider-arrow--next {
      right: 8px;
    }
  }
{% endstylesheet %}

{% javascript %}
  class ProfessionalSlider {
    constructor(container) {
      this.container = container;
      this.sliderContainer = container.querySelector('.slider-container');
      this.wrapper = container.querySelector('.slider-wrapper');
      this.slides = container.querySelectorAll('.slide');
      this.prevArrow = container.querySelector('.slider-arrow--prev');
      this.nextArrow = container.querySelector('.slider-arrow--next');
      
      this.currentIndex = 0;
      this.slideWidth = 338; // Desktop width
      this.gap = 16;
      this.slidesVisible = 1;
      this.isTransitioning = false;
      
      if (this.slides.length <= 1) return;
      
      this.init();
    }

    init() {
      this.calculateVisibleSlides();
      this.setupInfiniteScroll();
      this.bindEvents();
      this.updateSlider();
    }

    calculateVisibleSlides() {
      const containerWidth = this.sliderContainer.offsetWidth;
      this.slidesVisible = Math.max(1, Math.floor(containerWidth / (this.slideWidth + this.gap)));
    }

    setupInfiniteScroll() {
      // Clone slides for infinite scroll
      const slidesToClone = Math.min(this.slidesVisible, this.slides.length);
      
      // Add clones at the end
      for (let i = 0; i < slidesToClone; i++) {
        const clone = this.slides[i].cloneNode(true);
        clone.classList.add('slide-clone');
        this.wrapper.appendChild(clone);
      }
      
      // Add clones at the beginning
      for (let i = this.slides.length - slidesToClone; i < this.slides.length; i++) {
        const clone = this.slides[i].cloneNode(true);
        clone.classList.add('slide-clone');
        this.wrapper.insertBefore(clone, this.wrapper.firstChild);
      }
      
      // Update slides reference
      this.slides = this.wrapper.querySelectorAll('.slide');
      this.currentIndex = slidesToClone; // Start at first original slide
    }

    bindEvents() {
      if (this.prevArrow) {
        this.prevArrow.addEventListener('click', () => this.prevSlide());
      }
      
      if (this.nextArrow) {
        this.nextArrow.addEventListener('click', () => this.nextSlide());
      }

      // Mouse scroll disabled - arrows only

      // Touch/swipe support
      this.addTouchSupport();
      
      // Resize observer
      if (window.ResizeObserver) {
        this.resizeObserver = new ResizeObserver(() => {
          this.calculateVisibleSlides();
          this.updateSlider();
        });
        this.resizeObserver.observe(this.sliderContainer);
      }
    }

    addTouchSupport() {
      let startX = 0;
      let startY = 0;
      let isDragging = false;

      this.wrapper.addEventListener('touchstart', (e) => {
        startX = e.touches[0].clientX;
        startY = e.touches[0].clientY;
        isDragging = true;
      });

      this.wrapper.addEventListener('touchmove', (e) => {
        if (!isDragging) return;
        e.preventDefault();
      });

      this.wrapper.addEventListener('touchend', (e) => {
        if (!isDragging) return;
        
        const endX = e.changedTouches[0].clientX;
        const endY = e.changedTouches[0].clientY;
        const diffX = startX - endX;
        const diffY = startY - endY;

        if (Math.abs(diffX) > Math.abs(diffY) && Math.abs(diffX) > 50) {
          if (diffX > 0) {
            this.nextSlide();
          } else {
            this.prevSlide();
          }
        }
        
        isDragging = false;
      });
    }

    nextSlide() {
      if (this.isTransitioning) return;
      
      this.currentIndex++;
      this.updateSlider();
      
      // Check if we need to reset position for infinite scroll
      if (this.currentIndex >= this.slides.length - this.slidesVisible) {
        setTimeout(() => {
          this.currentIndex = this.slidesVisible;
          this.wrapper.style.transition = 'none';
          this.updateSlider();
          setTimeout(() => {
            this.wrapper.style.transition = 'transform 0.4s cubic-bezier(0.25, 0.46, 0.45, 0.94)';
          }, 50);
        }, 400);
      }
    }

    prevSlide() {
      if (this.isTransitioning) return;
      
      this.currentIndex--;
      this.updateSlider();
      
      // Check if we need to reset position for infinite scroll
      if (this.currentIndex < this.slidesVisible) {
        setTimeout(() => {
          this.currentIndex = this.slides.length - (this.slidesVisible * 2);
          this.wrapper.style.transition = 'none';
          this.updateSlider();
          setTimeout(() => {
            this.wrapper.style.transition = 'transform 0.4s cubic-bezier(0.25, 0.46, 0.45, 0.94)';
          }, 50);
        }, 400);
      }
    }

    updateSlider() {
      const translateX = -this.currentIndex * (this.slideWidth + this.gap);
      this.wrapper.style.transform = `translateX(${translateX}px)`;
    }

    destroy() {
      if (this.resizeObserver) {
        this.resizeObserver.disconnect();
      }
    }
  }

  // Initialize sliders
  function initSliders() {
    const sliders = document.querySelectorAll('.image-slider');
    sliders.forEach(slider => {
      if (!slider.dataset.sliderInitialized) {
        slider.dataset.sliderInitialized = 'true';
        new ProfessionalSlider(slider);
      }
    });
  }

  // Initialize when DOM is ready
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initSliders);
  } else {
    initSliders();
  }
{% endjavascript %}

{% schema %}
{
  "name": "Professional Image Slider",
  "tag": "section",
  "class": "section",
  "max_blocks": 20,
  "settings": [
    {
      "type": "checkbox",
      "id": "show_arrows",
      "label": "Show navigation arrows",
      "default": true
    },
    {
      "type": "select",
      "id": "corner_style",
      "label": "Corner style",
      "options": [
        { "value": "sharp", "label": "Sharp" },
        { "value": "soft", "label": "Soft" },
        { "value": "rounded", "label": "Rounded" }
      ],
      "default": "rounded"
    }
  ],
  "blocks": [
    {
      "type": "image",
      "name": "Slide",
      "settings": [
        {
          "type": "image_picker",
          "id": "image",
          "label": "Image (optional)"
        },
        {
          "type": "color",
          "id": "background_color",
          "label": "Background Color",
          "default": "#f0f0f0",
          "info": "Used when no image is selected"
        },
        {
          "type": "text",
          "id": "caption",
          "label": "Caption (optional)",
          "info": "Text overlay on the slide"
        }
      ]
    }
  ],
  "presets": [
    {
      "name": "Professional Image Slider",
      "blocks": [
        {
          "type": "image",
          "settings": {
            "background_color": "#ff6b6b",
            "caption": "1"
          }
        },
        {
          "type": "image",
          "settings": {
            "background_color": "#4ecdc4",
            "caption": "2"
          }
        },
        {
          "type": "image",
          "settings": {
            "background_color": "#45b7d1",
            "caption": "3"
          }
        },
        {
          "type": "image",
          "settings": {
            "background_color": "#96ceb4",
            "caption": "4"
          }
        },
        {
          "type": "image",
          "settings": {
            "background_color": "#feca57",
            "caption": "5"
          }
        }
      ]
    }
  ]
}
{% endschema %}